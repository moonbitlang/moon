// Generated by moon test.

fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

typealias Moonbit_Test_Driver_Internal_No_Args_Function = () -> Unit!Error

typealias Moonbit_Test_Driver_Internal_With_Args_Function = (@moonbitlang/core/test.T) -> Unit!Error

typealias Moonbit_Test_Driver_Internal_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (Moonbit_Test_Driver_Internal_No_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

typealias Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (Moonbit_Test_Driver_Internal_With_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

struct Moonbit_Test_Driver_Internal_Meta {
  filename : String
  index : Int
  attrs : @moonbitlang/core/builtin.Array[String]
}

enum Moonbit_Test_Driver_Internal__F {
  F0(Moonbit_Test_Driver_Internal_No_Args_Function)
  F1(Moonbit_Test_Driver_Internal_With_Args_Function)
}

struct Moonbit_Test_Driver_Internal__TestCase {
  f : Moonbit_Test_Driver_Internal__F
  meta : Moonbit_Test_Driver_Internal_Meta
}

fn moonbit_test_driver_internal_apply_filter(
  no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map,
  with_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map,
  file_filter : String,
  index_filter : Int
) -> Option[Moonbit_Test_Driver_Internal__TestCase] {
  let no_args_filtered_test = match no_args_tests.get(file_filter) {
    Some(index_func_map) => {
      match index_func_map.get(index_filter) {
        Some(func_attrs_tuple) => {
          let k = {
            f: Moonbit_Test_Driver_Internal__F::F0(func_attrs_tuple.0),
            meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
          }
          Some(k)
        }
        _ => None
      }
    }
    _ => None
  }

  let with_args_filtered_test = match with_args_tests.get(file_filter) {
    Some(index_func_map) => {
      match index_func_map.get(index_filter) {
        Some(func_attrs_tuple) => {
          let k = {
            f: Moonbit_Test_Driver_Internal__F::F1(func_attrs_tuple.0),
            meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
          }
          Some(k)
        }
        _ => None
      }
    }
    _ => None
  }

  match no_args_filtered_test {
    Some(it) => Some(it)
    _ => with_args_filtered_test
  }
}

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = { }  // WILL BE REPLACED
let moonbit_test_driver_internal_with_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map = { }  // WILL BE REPLACED

pub fn moonbit_test_driver_internal_execute(file_name: MoonbitTestDriverInternalExternString, index: Int) -> Unit {
  let file_filter: String = moonbit_test_driver_internal_get_file_name(file_name)
  let index_filter : Int = index
  let filtered_test = moonbit_test_driver_internal_apply_filter(
    moonbit_test_driver_internal_no_args_tests,
    moonbit_test_driver_internal_with_args_tests,
    file_filter,
    index_filter
  )
  let mut test_name = ""
  let mut file_name = ""
  let mut message = ""
  match filtered_test {
    Some(item) => {
      let attrs = item.meta.attrs
      file_name = item.meta.filename
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        item.meta.index.to_string()
      } else {
        name
      }
      try {
        let func = match item.f {
        Moonbit_Test_Driver_Internal__F::F0(f) => f
        Moonbit_Test_Driver_Internal__F::F1(f) =>
            fn() {
              let it : @moonbitlang/core/test.T = {
                name,
                buffer: Buffer::new(),
              }
              f!(it)
            }
        }
        func!()
      } catch {
        Failure(e) | InspectError(e) | SnapshotError(e) => {
          test_name = name
          message = e
        }
        e => {
          test_name = name
          message = moonbit_test_driver_internal_error_to_string(e)
        }
      }
    }
    _ => { message = "internal error: failed to filter test with (\{file_filter}, \{index_filter})" }
  }

  fn repr(obj : String) -> String {
    let buf = @moonbitlang/core/builtin.Buffer::new(size_hint=16)
    Show::output(obj, buf)
    buf.to_string()
  }

  let file_name = repr(file_name)
  let test_name = repr(test_name)
  let message = repr(message)
  @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
  @moonbitlang/core/builtin.println(
    "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
  )
  @moonbitlang/core/builtin.println("{END_MOONTEST}")
}

fn main {
  ()
}

fn moonbit_test_driver_internal_get_file_name(file_name : MoonbitTestDriverInternalExternString) -> String { panic() }
type MoonbitTestDriverInternalExternString
