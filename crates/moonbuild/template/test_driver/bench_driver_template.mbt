// Generated by moon test.

pub(all) struct Moonbit_Test_Driver_Internal_With_Bench_Args_Function((@moonbitlang/core/bench.T) -> Unit raise Error)

type Moonbit_Test_Driver_Internal_TestDriver_With_Bench_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (Moonbit_Test_Driver_Internal_With_Bench_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

struct Moonbit_Test_Driver_Internal_Meta {
  filename : String
  index : Int
  attrs : @moonbitlang/core/builtin.Array[String]
}

struct Moonbit_Test_Driver_Internal__TestCase {
  f : Moonbit_Test_Driver_Internal_With_Bench_Args_Function
  meta : Moonbit_Test_Driver_Internal_Meta
}

let moonbit_test_driver_internal_with_bench_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Bench_Args_Map = { }  // WILL BE REPLACED

fn moonbit_test_driver_internal_apply_filter(
  with_bench_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Bench_Args_Map,
  file_filter : String,
  index_filter : Int
) -> Option[Moonbit_Test_Driver_Internal__TestCase] {
  match with_bench_args_tests.get(file_filter) {
    Some(index_func_map) => {
      match index_func_map.get(index_filter) {
        Some(func_attrs_tuple) => {
          let k = {
            f: func_attrs_tuple.0,
            meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
          }
          Some(k)
        }
        _ => None
      }
    }
    _ => None
  }
}

pub fn moonbit_test_driver_internal_do_execute(filename : String, index : Int) -> Unit {
  let filtered_test = moonbit_test_driver_internal_apply_filter(
    moonbit_test_driver_internal_with_bench_args_tests,
    filename,
    index
  )
  let mut test_name = ""
  let mut file_name = ""
  let mut message = ""

  match filtered_test {
    Some(item) => {
      let attrs = item.meta.attrs
      file_name = item.meta.filename
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        item.meta.index.to_string()
      } else {
        name
      }

      if MOONBIT_TEST_DRIVER_INTERNAL_IS_NATIVE && attrs.iter().any(fn(attr) -> Bool {
        attr.length() >= 5 && attr[0] == 'p' && attr[1] == 'a' && attr[2] == 'n' && attr[3] == 'i' && attr[4] == 'c'
      }) {
        @moonbitlang/core/builtin.println("skipped test block: \{file_name}: \{attrs[0]}")
        @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
        @moonbitlang/core/builtin.println(
          "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name.escape()}, \"index\": \"\{index}\", \"test_name\": \{name.escape()}, \"message\": \"skipped test\"}",
        )
        @moonbitlang/core/builtin.println("{END_MOONTEST}")
        return
      }
      test_name = name
      try {
        let bench_out = @moonbitlang/core/bench.new()
        item.f.inner()(bench_out)
        let s = bench_out.dump_summaries()
        message = "@BATCH_BENCH { \"summaries\": \{s} }"
      } catch {
        @moonbitlang/core/builtin.Failure(e) | @moonbitlang/core/builtin.InspectError(e) | @moonbitlang/core/builtin.SnapshotError(e) | @moonbitlang/core/builtin.BenchError(e) => {
          message = e
        }
        e => {
          message = moonbit_test_driver_internal_error_to_string(e)
        }
      }
    }
    _ => { message = "skipped test" }
  }

  let file_name = file_name.escape()
  let test_name = test_name.escape()
  let message = message.escape()
  @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
  @moonbitlang/core/builtin.println(
    "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
  )
  @moonbitlang/core/builtin.println("{END_MOONTEST}")
}

#cfg(target="native")
#test_entry
fn main {
  for arg in moonbit_test_driver_internal_native_parse_args() {
    moonbit_test_driver_internal_do_execute(arg.0, arg.1)
  }
}

#cfg(not(target="native"))
#test_entry
fn main {
  ()
}

#cfg(target="js")
pub fn moonbit_test_driver_internal_execute(filename : String, index : Int) -> Unit {
  moonbit_test_driver_internal_do_execute(filename, index)
}

#cfg(any(target="wasm", target="wasm-gc"))
pub fn moonbit_test_driver_internal_execute(
  filename : MoonbitTestDriverInternalExternString,
  index : Int,
) -> Unit {
  let filename = moonbit_test_driver_internal_get_file_name(filename)
  moonbit_test_driver_internal_do_execute(filename, index)
}

#cfg(not(target="native"))
pub fn moonbit_test_driver_finish() -> Unit {
  // {COVERAGE_END}
}
