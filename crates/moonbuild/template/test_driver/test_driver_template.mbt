// Generated by moon test.

type Moonbit_Test_Driver_Internal_No_Args_Function = () -> Unit raise Error

type Moonbit_Test_Driver_Internal_With_Args_Function = (Moonbit_Test_Driver_Internal_Test_Arg) -> Unit raise Error

type Moonbit_Test_Driver_Internal_Async_Function = async (Moonbit_Test_Driver_Internal_Test_Arg) -> Unit raise

type Moonbit_Test_Driver_Internal_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (
      Moonbit_Test_Driver_Internal_No_Args_Function,
      @moonbitlang/core/builtin.Array[String],
    ),
  ],
]

type Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (
      Moonbit_Test_Driver_Internal_With_Args_Function,
      @moonbitlang/core/builtin.Array[String],
    ),
  ],
]

type Moonbit_Test_Driver_Internal_TestDriver_Async_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (
      Moonbit_Test_Driver_Internal_Async_Function,
      @moonbitlang/core/builtin.Array[String],
    ),
  ],
]

struct Moonbit_Test_Driver_Internal_Meta {
  filename : String
  index : Int
  attrs : @moonbitlang/core/builtin.Array[String]
}

enum Moonbit_Test_Driver_Internal__F {
  F0(Moonbit_Test_Driver_Internal_No_Args_Function)
  F1(Moonbit_Test_Driver_Internal_With_Args_Function)
  F2(Moonbit_Test_Driver_Internal_Async_Function)
}

struct Moonbit_Test_Driver_Internal__TestCase {
  f : Moonbit_Test_Driver_Internal__F
  meta : Moonbit_Test_Driver_Internal_Meta
}

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = { }  // WILL BE REPLACED
let moonbit_test_driver_internal_with_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map = { }  // WILL BE REPLACED
let moonbit_test_driver_internal_async_tests : Moonbit_Test_Driver_Internal_TestDriver_Async_Map = { }  // WILL BE REPLACED

fn moonbit_test_driver_internal_apply_filter(
  no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map,
  with_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map,
  async_tests : Moonbit_Test_Driver_Internal_TestDriver_Async_Map,
  file_filter : String,
  index_filter : Int
) -> Option[Moonbit_Test_Driver_Internal__TestCase] {
  match no_args_tests.get(file_filter) {
    Some(index_func_map) if index_func_map.get(index_filter) is Some(func_attrs_tuple) => {
      let k = {
        f: Moonbit_Test_Driver_Internal__F::F0(func_attrs_tuple.0),
        meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
      }
      return Some(k)
    }
    _ => ()
  }

  match with_args_tests.get(file_filter) {
    Some(index_func_map) if index_func_map.get(index_filter) is Some(func_attrs_tuple) => {
      let k = {
        f: Moonbit_Test_Driver_Internal__F::F1(func_attrs_tuple.0),
        meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
      }
      return Some(k)
    }
    _ => ()
  }

  match async_tests.get(file_filter) {
    Some(index_func_map) if index_func_map.get(index_filter) is Some(func_attrs_tuple) => {
      let k = {
        f: Moonbit_Test_Driver_Internal__F::F2(func_attrs_tuple.0),
        meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
      }
      return Some(k)
    }
    _ => ()
  }

  None
}

pub fn moonbit_test_driver_internal_do_execute(
  async_ctx : Moonbit_Test_Driver_Internal_Async_Context,
  filename : String,
  index : Int,
) -> Unit {
  let filtered_test = moonbit_test_driver_internal_apply_filter(
    moonbit_test_driver_internal_no_args_tests,
    moonbit_test_driver_internal_with_args_tests,
    moonbit_test_driver_internal_async_tests,
    filename,
    index
  )

  fn handle_result(
    test_name : String,
    file_name : String,
    message : String,
    skipped : Bool,
  ) {
    // In WASM, this function is called by the external test driver, but here
    // in native mode there's nothing that calls it, so we call it manually.
    if not(skipped) && MOONBIT_TEST_DRIVER_INTERNAL_IS_NATIVE {
      // {COVERAGE_END}
    }
    let file_name = file_name.escape()
    let test_name = test_name.escape()
    let message = message.escape()
    @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
    @moonbitlang/core/builtin.println(
      "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
    )
    @moonbitlang/core/builtin.println("{END_MOONTEST}")
  }

  match filtered_test {
    Some(item) => {
      let attrs = item.meta.attrs
      let file_name = item.meta.filename
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        item.meta.index.to_string()
      } else {
        name
      }

      if MOONBIT_TEST_DRIVER_INTERNAL_IS_NATIVE && attrs.iter().any(fn(attr) -> Bool {
        attr.length() >= 5 && attr[0] == 'p' && attr[1] == 'a' && attr[2] == 'n' && attr[3] == 'i' && attr[4] == 'c'
      }) {
        @moonbitlang/core/builtin.println("skipped test block: \{file_name}: \{attrs[0]}")
        handle_result(name, file_name, "skipped test", true)
        return
      }

      fn on_err(err : Error) {
        match err {
          @moonbitlang/core/builtin.Failure(e) | @moonbitlang/core/builtin.InspectError(e) | @moonbitlang/core/builtin.SnapshotError(e) => {
            handle_result(name, file_name, e, false)
          }
          e => {
            let message = moonbit_test_driver_internal_error_to_string(e)
            handle_result(name, file_name, message, false)
          }
        }
      }

      match item.f {
        Moonbit_Test_Driver_Internal__F::F0(f) => {
          try f() catch {
            err => on_err(err)
          } noraise {
            _ => handle_result(name, file_name, "", false)
          }
        }
        Moonbit_Test_Driver_Internal__F::F1(f) => {
          try f(moonbit_test_driver_internal_new_test_arg(name)) catch {
            err => on_err(err)
          } noraise {
            _ => handle_result(name, file_name, "", false)
          }
        }
        Moonbit_Test_Driver_Internal__F::F2(f) =>
          moonbit_test_driver_internal_run_async_test(
            async_ctx,
            name,
            on_err~,
            fn(arg) {
              try f(arg) catch {
                err => on_err(err)
              } noraise {
                _ => handle_result(name, file_name, "", false)
              }
            },
          )
      }
    }
    _ => handle_result("", "", "skipped test", true)
  }
}

#cfg(target="native")
#test_entry
fn main {
  moonbit_test_driver_internal_run_async_main(fn(ctx) {
    for arg in moonbit_test_driver_internal_native_parse_args() {
      moonbit_test_driver_internal_do_execute(ctx, arg.0, arg.1)
    }
  })
}

#cfg(not(target="native"))
#test_entry
fn main {
  ()
}

#cfg(target="js")
pub fn moonbit_test_driver_internal_execute(filename : String, index : Int) -> Unit {
  moonbit_test_driver_internal_run_async_main(fn(ctx) {
    moonbit_test_driver_internal_do_execute(ctx, filename, index)
  })
}

#cfg(any(target="wasm", target="wasm-gc"))
pub fn moonbit_test_driver_internal_execute(
  filename : MoonbitTestDriverInternalExternString,
  index : Int,
) -> Unit {
  let filename = moonbit_test_driver_internal_get_file_name(filename)
  moonbit_test_driver_internal_run_async_main(fn(ctx) {
    moonbit_test_driver_internal_do_execute(ctx, filename, index)
  })
}

#cfg(not(target="native"))
pub fn moonbit_test_driver_finish() -> Unit {
  // {COVERAGE_END}
}
