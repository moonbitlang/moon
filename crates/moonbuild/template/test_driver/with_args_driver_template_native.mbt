// Generated by moon test.

fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

fn moonbit_unsafe_char_from_int(x : Int) -> Char = "%identity"
typealias Moonbit_Test_Driver_Internal_No_Args_Function = () -> Unit!Error

typealias Moonbit_Test_Driver_Internal_With_Args_Function = (@moonbitlang/core/test.T) -> Unit!Error

typealias Moonbit_Test_Driver_Internal_With_Bench_Args_Function = (@moonbitlang/core/bench.T) -> Unit!Error

typealias Moonbit_Test_Driver_Internal_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (Moonbit_Test_Driver_Internal_No_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

typealias Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (Moonbit_Test_Driver_Internal_With_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

typealias Moonbit_Test_Driver_Internal_TestDriver_With_Bench_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (Moonbit_Test_Driver_Internal_With_Bench_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

struct Moonbit_Test_Driver_Internal_Meta {
  filename : String
  index : Int
  attrs : @moonbitlang/core/builtin.Array[String]
}

enum Moonbit_Test_Driver_Internal__F {
  F0(Moonbit_Test_Driver_Internal_No_Args_Function)
  F1(Moonbit_Test_Driver_Internal_With_Args_Function)
  F2(Moonbit_Test_Driver_Internal_With_Bench_Args_Function)
}

struct Moonbit_Test_Driver_Internal__TestCase {
  f : Moonbit_Test_Driver_Internal__F
  meta : Moonbit_Test_Driver_Internal_Meta
}

fn item_is_bench(item : Moonbit_Test_Driver_Internal__TestCase) -> Bool {
  match item.f {
    Moonbit_Test_Driver_Internal__F::F0(_) => false
    Moonbit_Test_Driver_Internal__F::F1(_) => false
    Moonbit_Test_Driver_Internal__F::F2(_) => true
  }
}

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = { }  // WILL BE REPLACED
let moonbit_test_driver_internal_with_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map = { }  // WILL BE REPLACED
let moonbit_test_driver_internal_with_bench_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Bench_Args_Map = { }  // WILL BE REPLACED

fn moonbit_test_driver_internal_apply_filter(
  no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map,
  with_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map,
  with_bench_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Bench_Args_Map,
  file_filter : String,
  index_filter : Int
) -> Option[Moonbit_Test_Driver_Internal__TestCase] {
  let no_args_filtered_test = match no_args_tests.get(file_filter) {
    Some(index_func_map) => {
      match index_func_map.get(index_filter) {
        Some(func_attrs_tuple) => {
          let k = {
            f: Moonbit_Test_Driver_Internal__F::F0(func_attrs_tuple.0),
            meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
          }
          Some(k)
        }
        _ => None
      }
    }
    _ => None
  }

  let with_args_filtered_test = match with_args_tests.get(file_filter) {
    Some(index_func_map) => {
      match index_func_map.get(index_filter) {
        Some(func_attrs_tuple) => {
          let k = {
            f: Moonbit_Test_Driver_Internal__F::F1(func_attrs_tuple.0),
            meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
          }
          Some(k)
        }
        _ => None
      }
    }
    _ => None
  }

  let with_bench_args_filtered_test = match with_bench_args_tests.get(file_filter) {
    Some(index_func_map) => {
      match index_func_map.get(index_filter) {
        Some(func_attrs_tuple) => {
          let k = {
            f: Moonbit_Test_Driver_Internal__F::F2(func_attrs_tuple.0),
            meta: { filename: file_filter, index: index_filter, attrs: func_attrs_tuple.1 },
          }
          Some(k)
        }
        _ => None
      }
    }
    _ => None
  }

  if no_args_filtered_test is Some(_) {
     no_args_filtered_test
  } else if with_args_filtered_test is Some(_) {
     with_args_filtered_test
  } else {
     with_bench_args_filtered_test
  }
}

pub fn moonbit_test_driver_internal_execute(filename : String, index : Int) -> Unit {
  let filtered_test = moonbit_test_driver_internal_apply_filter(
    moonbit_test_driver_internal_no_args_tests,
    moonbit_test_driver_internal_with_args_tests,
    moonbit_test_driver_internal_with_bench_args_tests,
    filename,
    index
  )
  let mut test_name = ""
  let mut file_name = ""
  let mut message = ""

  match filtered_test {
    Some(item) => {
      let attrs = item.meta.attrs
      file_name = item.meta.filename
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        item.meta.index.to_string()
      } else {
        name
      }
      let bench_mode = false // WILL BE REPLACED
      match (bench_mode, item_is_bench(item)) {
        (true, false) | (false, true) => {
          @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
          @moonbitlang/core/builtin.println(
            "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name.escape()}, \"index\": \"\{index}\", \"test_name\": \{name.escape()}, \"message\": \"skipped test\"}",
          )
          @moonbitlang/core/builtin.println("{END_MOONTEST}")
          return
        }
        _ => ()
      }

      if attrs.iter().any(fn(attr) -> Bool {
        attr.length() >= 5 && attr.charcode_at(0) == 'p' && attr.charcode_at(1) == 'a' && attr.charcode_at(2) == 'n' && attr.charcode_at(3) == 'i' && attr.charcode_at(4) == 'c'
      }) {
        @moonbitlang/core/builtin.println("skipped test block: \{file_name}: \{attrs[0]}")
        @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
        @moonbitlang/core/builtin.println(
          "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name.escape()}, \"index\": \"\{index}\", \"test_name\": \{name.escape()}, \"message\": \"skipped test\"}",
        )
        @moonbitlang/core/builtin.println("{END_MOONTEST}")
        return
      }
      test_name = name

      try {
        let bench_out = if item_is_bench(item) {
          let it = @moonbitlang/core/bench.new()
          Some(it)
        } else {
          None
        }
        let func = match item.f {
        Moonbit_Test_Driver_Internal__F::F0(f) => f
        Moonbit_Test_Driver_Internal__F::F1(f) =>
            fn() {
              let it = @moonbitlang/core/test.new(name)
              f!(it)
            }
        Moonbit_Test_Driver_Internal__F::F2(f) =>
            fn() {
              let it = match bench_out {
                Some(inner) => inner
                _ => panic() // unreachable
              }
              f!(it)
            }
        }
        func!()
        match bench_out {
          Some(inner) => {
            let s = inner.dump_summaries()
            message = "@BATCH_BENCH { \"summaries\": \{s} }"
          }
          None => ()
        }
      } catch {
        Failure(e) | InspectError(e) | SnapshotError(e) | BenchError(e) => {
          message = e
        }
        e => {
          message = moonbit_test_driver_internal_error_to_string(e)
        }
      }
    }
    _ => { message = "internal error: failed to filter test with (\{filename}, \{index})" }
  }

  let file_name = file_name.escape()
  let test_name = test_name.escape()
  let message = message.escape()
  @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
  @moonbitlang/core/builtin.println(
    "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
  )
  @moonbitlang/core/builtin.println("{END_MOONTEST}")
}

pub fn moonbit_test_driver_finish() -> Unit {
  // {COVERAGE_END}
}

#test_entry
fn main {
  fn moonbit_test_driver_internal_parse_int_(s : String) -> Int {
    let mut res = 0
    let len = s.length()
    for i = 0; i < len; i = i + 1 {
      res = res * 10 + (s.charcode_at(i) - '0'.to_int())
    }
    res
  }

  fn moonbit_test_driver_internal_get_cli_args_internal() -> @moonbitlang/core/builtin.Array[String] {
    let tmp = moonbit_test_driver_internal_get_cli_args_ffi()
    let res = @moonbitlang/core/builtin.Array::new(capacity=tmp.length())
    for i = 0; i < tmp.length(); i = i + 1 {
      res.push(moonbit_test_driver_internal_utf8_bytes_to_mbt_string(tmp[i]))
    }
    res
  }

  fn moonbit_test_driver_internal_utf8_bytes_to_mbt_string(bytes : Bytes) -> String {
    let res = @moonbitlang/core/builtin.StringBuilder::new()
    let len = bytes.length()
    let mut i = 0
    while i < len {
      let mut c = bytes[i].to_int()
      if c < 0x80 {
        res.write_char(moonbit_unsafe_char_from_int(c))
        i += 1
      } else if c < 0xE0 {
        if i + 1 >= len {
          break
        }
        c = ((c & 0x1F) << 6) | (bytes[i + 1].to_int() & 0x3F)
        res.write_char(moonbit_unsafe_char_from_int(c))
        i += 2
      } else if c < 0xF0 {
        if i + 2 >= len {
          break
        }
        c = ((c & 0x0F) << 12) |
          ((bytes[i + 1].to_int() & 0x3F) << 6) |
          (bytes[i + 2].to_int() & 0x3F)
        res.write_char(moonbit_unsafe_char_from_int(c))
        i += 3
      } else {
        if i + 3 >= len {
          break
        }
        c = ((c & 0x07) << 18) |
          ((bytes[i + 1].to_int() & 0x3F) << 12) |
          ((bytes[i + 2].to_int() & 0x3F) << 6) |
          (bytes[i + 3].to_int() & 0x3F)
        c -= 0x10000
        res.write_char(moonbit_unsafe_char_from_int((c >> 10) + 0xD800))
        res.write_char(moonbit_unsafe_char_from_int((c & 0x3FF) + 0xDC00))
        i += 4
      }
    }
    res.to_string()
  }

  fn moonbit_test_driver_internal_split_mbt_string(s : String, sep : Char) -> @moonbitlang/core/builtin.Array[String] {
    let res = []
    let mut i = 0
    let mut start = 0
    while i < s.length() {
      if moonbit_unsafe_char_from_int(s.charcode_at(i)) == sep {
        res.push(s.substring(start = start, end = i))
        start = i + 1
      }
      i += 1
    }
    if start < s.length() {
      res.push(s.substring(start = start, end = s.length()))
    }
    res
  }

  let file_and_index = []

  let cli_args = moonbit_test_driver_internal_get_cli_args_internal()
  let test_args = moonbit_test_driver_internal_split_mbt_string(cli_args[1], '/')
  for arg in test_args {
    let file_and_range = moonbit_test_driver_internal_split_mbt_string(arg, ':')
    let file = file_and_range[0]
    let range = file_and_range[1]
    let start_and_end = moonbit_test_driver_internal_split_mbt_string(range, '-')
    let start = moonbit_test_driver_internal_parse_int_(start_and_end[0])
    let end = moonbit_test_driver_internal_parse_int_(start_and_end[1])
    for i = start; i < end; i = i + 1 {
      file_and_index.push((file, i))
    }
  }

  for arg in file_and_index {
    moonbit_test_driver_internal_execute(arg.0, arg.1)
  }
}

fn moonbit_test_driver_internal_get_cli_args_ffi() -> FixedArray[Bytes] = "$moonbit.get_cli_args"
