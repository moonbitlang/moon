// Generated by moon test.

fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

typealias Moonbit_Test_Driver_Internal_No_Args_Function = () -> Unit!Error

typealias Moonbit_Test_Driver_Internal_With_Args_Function = (@moonbitlang/core/test.T) -> Unit!Error

typealias Moonbit_Test_Driver_Internal_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (Moonbit_Test_Driver_Internal_No_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

typealias Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (Moonbit_Test_Driver_Internal_With_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

struct Moonbit_Test_Driver_Internal_Meta {
  filename : String
  index : Int
  attrs : @moonbitlang/core/builtin.Array[String]
}

enum Moonbit_Test_Driver_Internal__F {
  F0(Moonbit_Test_Driver_Internal_No_Args_Function)
  F1(Moonbit_Test_Driver_Internal_With_Args_Function)
}

struct Moonbit_Test_Driver_Internal__TestCase {
  f : Moonbit_Test_Driver_Internal__F
  meta : Moonbit_Test_Driver_Internal_Meta
}

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = { }  // WILL BE REPLACED
let moonbit_test_driver_internal_with_args_tests : Moonbit_Test_Driver_Internal_TestDriver_With_Args_Map = { }  // WILL BE REPLACED

pub fn moonbit_test_driver_internal_execute() -> Unit {
  let all_tests: @moonbitlang/core/builtin.Array[Moonbit_Test_Driver_Internal__TestCase] = [];
  moonbit_test_driver_internal_with_args_tests.iter().each(fn(tuple_of_filename_and_index_func_map) {
    let (file_name, index_func_map) = tuple_of_filename_and_index_func_map
    index_func_map.iter().each(fn(tuple_of_index_and_func) {
      let (index, (func, attrs)) = tuple_of_index_and_func
      all_tests.push({
        f: Moonbit_Test_Driver_Internal__F::F1(func),
        meta: { filename: file_name, index, attrs }
      });
    });
  });
  moonbit_test_driver_internal_no_args_tests.iter().each(fn(tuple_of_filename_and_index_func_map) {
    let (file_name, index_func_map) = tuple_of_filename_and_index_func_map
    index_func_map.iter().each(fn(tuple_of_index_and_func) {
      let (index, (func, attrs)) = tuple_of_index_and_func
      all_tests.push({
        f: Moonbit_Test_Driver_Internal__F::F0(func),
        meta: { filename: file_name, index, attrs }
      });
    });
  });

  for item in all_tests {
    let mut message = ""

    let attrs = item.meta.attrs
    let file_name = item.meta.filename
    let index = item.meta.index
    let name = if attrs.is_empty() { "" } else { attrs[0] }
    let test_name = if name.length() == 0 {
      item.meta.index.to_string()
    } else {
      name
    }

    if attrs.iter().any(fn(attr) -> Bool {
      attr.length() >= 5 && attr[0] == 'p' && attr[1] == 'a' && attr[2] == 'n' && attr[3] == 'i' && attr[4] == 'c'
    }) {
      @moonbitlang/core/builtin.println("skipped test block: \{file_name}: \{attrs[0]}")
      @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
      @moonbitlang/core/builtin.println(
        "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name.escape()}, \"index\": \"\{index}\", \"test_name\": \{name.escape()}, \"message\": \"skipped test\"}",
      )
      @moonbitlang/core/builtin.println("{END_MOONTEST}")
      continue
    }

    try {
      let func = match item.f {
      Moonbit_Test_Driver_Internal__F::F0(f) => f
      Moonbit_Test_Driver_Internal__F::F1(f) =>
          fn() {
            let it : @moonbitlang/core/test.T = {
              name,
              buffer: @moonbitlang/core/builtin.StringBuilder::new(),
            }
            f!(it)
          }
      }
      func!()
    } catch {
      Failure(e) | InspectError(e) | SnapshotError(e) => {
        message = e
      }
      e => {
        message = moonbit_test_driver_internal_error_to_string(e)
      }
    }

    let file_name = file_name.escape()
    let test_name = test_name.escape()
    let message = message.escape()
    @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
    @moonbitlang/core/builtin.println(
      "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
    )
    @moonbitlang/core/builtin.println("{END_MOONTEST}")
  }
}

pub fn moonbit_test_driver_finish() -> Unit {
  // {COVERAGE_END}
}

fn main {
  moonbit_test_driver_internal_execute()
}
