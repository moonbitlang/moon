// Generated by moon test.

fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

typealias Moonbit_Test_Driver_Internal_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (() -> Unit!Error, @moonbitlang/core/builtin.Array[String]),
  ],
]

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = { }  // WILL BE REPLACED

pub fn moonbit_test_driver_internal_execute() -> Unit {
  for filename, index_func_map in moonbit_test_driver_internal_no_args_tests {
    for index, pair in index_func_map {
      let (func, attrs) = (pair.0, pair.1)

      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        index.to_string()
      } else {
        name
      }

      if attrs.iter().any(fn(attr) -> Bool {
        attr.length() >= 5 && attr[0] == 'p' && attr[1] == 'a' && attr[2] == 'n' && attr[3] == 'i' && attr[4] == 'c'
      }) {
        @moonbitlang/core/builtin.println("skipped test block: \{filename}: \{attrs[0]}")
        @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
        @moonbitlang/core/builtin.println(
          "{\"package\": \"{PACKAGE}\", \"filename\": \{filename.escape()}, \"index\": \"\{index}\", \"test_name\": \{name.escape()}, \"message\": \"skipped test\"}",
        )
        @moonbitlang/core/builtin.println("{END_MOONTEST}")
        continue
      }

      let mut message = ""
      try {
        func!()
      } catch {
        Failure(e) | InspectError(e) | SnapshotError(e) => {
          message = e
        }
        e => {
          message = moonbit_test_driver_internal_error_to_string(e)
        }
      }

      let file_name = filename.escape()
      let test_name = name.escape()
      let message = message.escape()
      @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
      @moonbitlang/core/builtin.println(
        "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
      )
      @moonbitlang/core/builtin.println("{END_MOONTEST}")
    }
  }
}

pub fn moonbit_test_driver_finish() -> Unit {
  // {COVERAGE_END}
}

fn main {
  moonbit_test_driver_internal_execute()
}
