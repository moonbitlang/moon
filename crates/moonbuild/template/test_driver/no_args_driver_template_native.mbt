// Generated by moon test.

fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

fn moonbit_unsafe_char_from_int(x : Int) -> Char = "%identity"

typealias Moonbit_Test_Driver_Internal_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (() -> Unit!Error, @moonbitlang/core/builtin.Array[String]),
  ],
]

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = { }  // WILL BE REPLACED

pub fn moonbit_test_driver_internal_execute(filename : String, index : Int) -> Unit {
  let filtered_test = match moonbit_test_driver_internal_no_args_tests.get(filename) {
    Some(index_func_map) => {
      index_func_map.get(index)
    }
    _ => None
  }

  let mut test_name = ""
  let mut message = ""
  match filtered_test {
    Some(item) => {
      let (func, attrs) = (item.0, item.1)

      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        index.to_string()
      } else {
        name
      }

      if attrs.iter().any(fn(attr) -> Bool {
        attr.length() >= 5 && attr.charcode_at(0) == 'p' && attr.charcode_at(1) == 'a' && attr.charcode_at(2) == 'n' && attr.charcode_at(3) == 'i' && attr.charcode_at(4) == 'c'
      }) {
        @moonbitlang/core/builtin.println("skipped test block: \{filename}: \{attrs[0]}")
        @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
        @moonbitlang/core/builtin.println(
          "{\"package\": \"{PACKAGE}\", \"filename\": \{filename.escape()}, \"index\": \"\{index}\", \"test_name\": \{name.escape()}, \"message\": \"skipped test\"}",
        )
        @moonbitlang/core/builtin.println("{END_MOONTEST}")
        return
      }

      test_name = name

      try {
        func()
      } catch {
        @moonbitlang/core/builtin.Failure(e) | @moonbitlang/core/builtin.InspectError(e) | @moonbitlang/core/builtin.SnapshotError(e) => {
          message = e
        }
        e => {
          message = moonbit_test_driver_internal_error_to_string(e)
        }
      }
    }
    _ => { message = "internal error: failed to filter test with (\{filename}, \{index})" }
  }

  let file_name = filename.escape()
  let test_name = test_name.escape()
  let message = message.escape()
  @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
  @moonbitlang/core/builtin.println(
    "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
  )
  @moonbitlang/core/builtin.println("{END_MOONTEST}")
}

pub fn moonbit_test_driver_finish() -> Unit {
  // {COVERAGE_END}
}

#test_entry
fn main {
  fn moonbit_test_driver_internal_parse_int_(s : String) -> Int {
    let mut res = 0
    let len = s.length()
    for i = 0; i < len; i = i + 1 {
      res = res * 10 + (s.charcode_at(i) - '0')
    }
    res
  }

  fn moonbit_test_driver_internal_get_cli_args_internal() -> @moonbitlang/core/builtin.Array[String] {
    let tmp = moonbit_test_driver_internal_get_cli_args_ffi()
    let res = @moonbitlang/core/builtin.Array::new(capacity=tmp.length())
    for i = 0; i < tmp.length(); i = i + 1 {
      res.push(moonbit_test_driver_internal_utf8_bytes_to_mbt_string(tmp[i]))
    }
    res
  }

  fn moonbit_test_driver_internal_utf8_bytes_to_mbt_string(bytes : Bytes) -> String {
    let res = @moonbitlang/core/builtin.StringBuilder::new()
    let len = bytes.length()
    let mut i = 0
    while i < len {
      let mut c = bytes[i].to_int()
      if c < 0x80 {
        res.write_char(moonbit_unsafe_char_from_int(c))
        i += 1
      } else if c < 0xE0 {
        if i + 1 >= len {
          break
        }
        c = ((c & 0x1F) << 6) | (bytes[i + 1].to_int() & 0x3F)
        res.write_char(moonbit_unsafe_char_from_int(c))
        i += 2
      } else if c < 0xF0 {
        if i + 2 >= len {
          break
        }
        c = ((c & 0x0F) << 12) |
          ((bytes[i + 1].to_int() & 0x3F) << 6) |
          (bytes[i + 2].to_int() & 0x3F)
        res.write_char(moonbit_unsafe_char_from_int(c))
        i += 3
      } else {
        if i + 3 >= len {
          break
        }
        c = ((c & 0x07) << 18) |
          ((bytes[i + 1].to_int() & 0x3F) << 12) |
          ((bytes[i + 2].to_int() & 0x3F) << 6) |
          (bytes[i + 3].to_int() & 0x3F)
        c -= 0x10000
        res.write_char(moonbit_unsafe_char_from_int((c >> 10) + 0xD800))
        res.write_char(moonbit_unsafe_char_from_int((c & 0x3FF) + 0xDC00))
        i += 4
      }
    }
    res.to_string()
  }

  fn moonbit_test_driver_internal_split_mbt_string(s : String, sep : Char) -> @moonbitlang/core/builtin.Array[String] {
    let res = []
    let mut i = 0
    let mut start = 0
    while i < s.length() {
      if moonbit_unsafe_char_from_int(s.charcode_at(i)) == sep {
        res.push(s.substring(start = start, end = i))
        start = i + 1
      }
      i += 1
    }
    if start < s.length() {
      res.push(s.substring(start = start, end = s.length()))
    }
    res
  }

  let file_and_index = []

  let cli_args = moonbit_test_driver_internal_get_cli_args_internal()
  let test_args = moonbit_test_driver_internal_split_mbt_string(cli_args[1], '/')
  for arg in test_args {
    let file_and_range = moonbit_test_driver_internal_split_mbt_string(arg, ':')
    let file = file_and_range[0]
    let range = file_and_range[1]
    let start_and_end = moonbit_test_driver_internal_split_mbt_string(range, '-')
    let start = moonbit_test_driver_internal_parse_int_(start_and_end[0])
    let end = moonbit_test_driver_internal_parse_int_(start_and_end[1])
    for i = start; i < end; i = i + 1 {
      file_and_index.push((file, i))
    }
  }

  for arg in file_and_index {
    moonbit_test_driver_internal_execute(arg.0, arg.1)
  }
}

fn moonbit_test_driver_internal_get_cli_args_ffi() -> FixedArray[Bytes] = "$moonbit.get_cli_args"
