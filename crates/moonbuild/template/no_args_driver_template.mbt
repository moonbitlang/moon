// Generated by moon test.

fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

typealias TestDriver_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (() -> Unit!Error, @moonbitlang/core/builtin.Array[String]),
  ],
]

let no_args_tests : TestDriver_No_Args_Map = { }  // WILL BE REPLACED

pub fn execute(filename: MoonbitTestDriverInternalExternString, index: Int) -> Unit {
  let file_filter = moonbit_test_driver_internal_get_file_name(filename)
  let index_filter = index
  let filtered_test = match no_args_tests.get(file_filter) {
    Some(index_func_map) => {
      index_func_map.get(index_filter)
    }
    _ => None
  }
  let mut test_name = ""
  let mut message = ""
  match filtered_test {
    Some(item) => {
      let (func, attrs) = (item.0, item.1)
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        index_filter.to_string()
      } else {
        name
      }
      try {
        func!()
      } catch {
        Failure(e) | InspectError(e) | SnapshotError(e) => {
          test_name = name
          message = e
        }
        e => {
          test_name = name
          message = moonbit_test_driver_internal_error_to_string(e)
        }
      }
    }
    _ => { message = "internal error: failed to filter test with (\{file_filter}, \{index_filter})" }
  }

  fn repr(obj : String) -> String {
    let buf = @moonbitlang/core/builtin.Buffer::new(size_hint=16)
    Show::output(obj, buf)
    buf.to_string()
  }

  let file_name = repr(file_filter)
  let test_name = repr(test_name)
  let message = repr(message)
  @moonbitlang/core/builtin.println("{BEGIN_MOONTEST}")
  @moonbitlang/core/builtin.println(
    "{\"package\": \"{PACKAGE}\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
  )
  @moonbitlang/core/builtin.println("{END_MOONTEST}")
}

fn main {
  ()
}

fn moonbit_test_driver_internal_get_file_name(file_name : MoonbitTestDriverInternalExternString) -> String { panic() }
type MoonbitTestDriverInternalExternString
