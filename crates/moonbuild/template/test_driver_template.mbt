// Generated by moon test.

fn catch_exception[A](body : A, on_exn : A) -> A = "%control.catch"

fn check_panic[A, B, E : Error](
  f : () -> A!E,
  does_panic : () -> B!E,
  no_panic : () -> B!E
) -> B!E {
  catch_exception(
    {
      f!() |> ignore
      no_panic!()
    },
    does_panic!(),
  )
}

fn startswith_panic(s : String) -> Bool {
  s.length() >= 5 && s[0] == 'p' && s[1] == 'a' && s[2] == 'n' && s[3] == 'i' &&
  s[4] == 'c'
}

typealias TestDriver_No_Args_Function = () -> Unit!Error

typealias TestDriver_With_Args_Function = (@moonbitlang/core/test.T) -> Unit!Error

typealias TestDriver_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (TestDriver_No_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

typealias TestDriver_With_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (TestDriver_With_Args_Function, @moonbitlang/core/builtin.Array[String]),
  ],
]

fn typing_tests(
  x : @moonbitlang/core/builtin.Map[
    String,
    @moonbitlang/core/builtin.Array[
      (TestDriver_No_Args_Function, @moonbitlang/core/builtin.Array[String]),
    ],
  ]
) -> Unit {
  ignore(x)
}

fn typing_no_args_tests(x : TestDriver_No_Args_Map) -> Unit {
  ignore(x)
}

fn typing_with_args_tests(x : TestDriver_With_Args_Map) -> Unit {
  ignore(x)
}

struct TestDriver__Meta {
  filename : String
  index : Int
  attrs : @moonbitlang/core/builtin.Array[String]
}

enum TestDriver__F {
  F0(TestDriver_No_Args_Function)
  F1(TestDriver_With_Args_Function)
}

struct TestDriver__TestCase {
  f : TestDriver__F
  meta : TestDriver__Meta
}

fn apply_filter(
  no_args_tests : TestDriver_No_Args_Map,
  with_args_tests : TestDriver_With_Args_Map,
  file_filter : String?,
  index_filter : Int?
) -> @moonbitlang/core/builtin.Array[TestDriver__TestCase] {
  let ret = []
  no_args_tests.iter().each(
    fn(file) {
      let filename = file.0
      match file_filter {
        Some(f) => if filename != f { return  }
        _ => ()
      }
      let tests = file.1
      tests.iter().each(
        fn(cases) {
          let index = cases.0
          match index_filter {
            Some(f) => if index != f { return  }
            _ => ()
          }
          let k = {
            f: TestDriver__F::F0(cases.1.0),
            meta: { filename, index, attrs: cases.1.1 },
          }
          ret.push(k)
        },
      )
    },
  )
  with_args_tests.iter().each(
    fn(file) {
      let filename = file.0
      match file_filter {
        Some(f) => if filename != f { return  }
        _ => ()
      }
      let tests = file.1
      tests.iter().each(
        fn(cases) {
          let index = cases.0
          match index_filter {
            Some(f) => if index != f { return  }
            _ => ()
          }
          let k = {
            f: TestDriver__F::F1(cases.1.0),
            meta: { filename, index, attrs: cases.1.1 },
          }
          ret.push(k)
        },
      )
    },
  )
  ret
}

fn main {
  let tests = {  } // WILL BE REPLACED
  let no_args_tests = {  } // WILL BE REPLACED
  let with_args_tests = {  } // WILL BE REPLACED
  typing_tests(tests)
  typing_no_args_tests(no_args_tests)
  typing_with_args_tests(with_args_tests)
  let file_filter : String? = None // WILL BE REPLACED
  let index_filter : Int? = None // WILL BE REPLACED
  let filtered_tests = apply_filter(
    no_args_tests, with_args_tests, file_filter, index_filter,
  )
  let total = filtered_tests.length()
  let test_names = @moonbitlang/core/builtin.Array::make(total, "")
  let filenames = @moonbitlang/core/builtin.Array::make(total, "")
  let messages = @moonbitlang/core/builtin.Array::make(total, "")
  let mut succ_idx = total
  let mut fail_idx = 0
  let mut counter = 0
  filtered_tests.iter().each(
    fn(item) {
      let filename = item.meta.filename
      filenames[counter] = filename
      counter += 1
      let attrs = item.meta.attrs
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        item.meta.index.to_string()
      } else {
        name
      }
      try {
        let f = match item.f {
          TestDriver__F::F0(f) => f
          TestDriver__F::F1(f) =>
            fn() {
              let it : @moonbitlang/core/test.T = {
                name,
                buffer: Buffer::new(),
              }
              f!(it)
            }
        }
        if startswith_panic(name) {
          check_panic!(
            f,
            fn() { () },
            fn() { raise Failure("panic is expected") },
          )
        } else {
          f!()
        }
        succ_idx -= 1
        test_names[succ_idx] = name
      } catch {
        Failure(e) | InspectError(e) => {
          test_names[fail_idx] = name
          messages[fail_idx] = e
          fail_idx += 1
        }
        _ => {
          test_names[fail_idx] = name
          messages[fail_idx] = "unexpected error"
          fail_idx += 1
        }
      }
    },
  )
  fn repr(obj : @moonbitlang/core/builtin.Array[String]) -> String {
    let buf = @moonbitlang/core/builtin.Buffer::new(size_hint=16)
    Show::output(obj, buf)
    buf.to_string()
  }

  let filenames = repr(filenames)
  let test_names = repr(test_names)
  let messages = repr(messages)
  let passed = total - succ_idx
  println("{BEGIN_MOONTEST}")
  println(
    "{\"passed\": \{passed}, \"package\": \"{PACKAGE}\", \"filenames\": \{filenames}, \"test_names\": \{test_names}, \"messages\": \{messages}}",
  )
  println("{END_MOONTEST}")
}
