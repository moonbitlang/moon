# moon: The build system and package manager for MoonBit.
# Copyright (C) 2024 International Digital Economy Academy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# For inquiries, you can contact us via e-mail at jichuruanjian@idea.edu.cn.

name: CI

on:
  push:
    branches: main
  pull_request:
    branches: main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 0
  CARGO_TARPAULIN_VERSION: 0.30.0

jobs:
  bleeding-test:
    needs: [typo-check, license-header-check]
    strategy:
      fail-fast: false
      matrix:
        os:
          # - ubuntu-latest
          - macos-latest
          - macos-13
          # - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Configure git
        run: git config --global core.autocrlf false

      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: dtolnay/rust-toolchain@1.80.0
        with:
          components: rustfmt, clippy
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          path: ~/.cargo/registry

      - name: install MoonBit(Unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          curl https://cli.moonbitlang.com/moon-ci/$(uname -s)-$(uname -m).tar.gz --output moonbit.tar.gz
          mkdir -p ~/.moon/bin
          mkdir -p ~/.moon/lib
          tar xf moonbit.tar.gz --directory ~/.moon/
          curl https://cli.moonbitlang.com/moon-ci/$(uname -s)-$(uname -m)/moonrun --output ~/.moon/bin/moonrun
          curl https://cli.moonbitlang.com/moon-ci/$(uname -s)-$(uname -m)/mooncake --output ~/.moon/bin/mooncake
          chmod +x ~/.moon/bin/moon*
          chmod +x ~/.moon/bin/internal/tcc
          git clone --depth 1 https://github.com/moonbitlang/core.git ~/.moon/lib/core
          echo "$HOME/.moon/bin" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/target/debug" >> $GITHUB_PATH

      - name: install MoonBit(Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          Invoke-WebRequest -Uri https://cli.moonbitlang.com/moon-ci/Windows-x86_64.zip -OutFile moonbit.zip
          New-Item -ItemType Directory -Force -Path "$env:USERPROFILE/.moon/bin"
          New-Item -ItemType Directory -Force -Path "$env:USERPROFILE/.moon/lib"
          Expand-Archive -Path "moonbit.zip" -DestinationPath "$env:USERPROFILE/.moon/" -Force
          Invoke-WebRequest -Uri https://cli.moonbitlang.com/moon-ci/Windows-x86_64/moonrun.exe -OutFile "$env:USERPROFILE/.moon/bin/moonrun.exe"
          Invoke-WebRequest -Uri https://cli.moonbitlang.com/moon-ci/Windows-x86_64/mooncake.exe -OutFile "$env:USERPROFILE/.moon/bin/mooncake.exe"
          git clone --depth 1 https://github.com/moonbitlang/core.git "$env:USERPROFILE/.moon/lib/core"
          "$env:USERPROFILE\.moon\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
          "$env:GITHUB_WORKSPACE\target\debug" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Setup MSVC
        if: ${{ matrix.os == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build
        run: cargo build

      - name: Set built binary to PATH (Unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$GITHUB_WORKSPACE/target/debug" >> $GITHUB_PATH
      - name: Set built binary to PATH (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: Add-Content $env:GITHUB_PATH "$env:GITHUB_WORKSPACE\target\debug"

      - name: Versions
        run: cargo run --bin moon version --all
      - name: Bundle core (Unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: cargo run --bin moon bundle --source-dir ~/.moon/lib/core --all
      - name: Bundle core (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: cargo run --bin moon bundle --source-dir "$env:USERPROFILE\.moon\lib\core" --all

      - name: moon update
        run: |
          cargo run --bin moon update

      - name: Test core (Unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          cargo run --bin moon test --source-dir ~/.moon/lib/core --target wasm-gc
          cargo run --bin moon test --source-dir ~/.moon/lib/core --target js
          cargo run --bin moon test --source-dir ~/.moon/lib/core --target wasm
          cargo run --bin moon test --source-dir ~/.moon/lib/core --target native
          cargo run --bin moon test --source-dir ~/.moon/lib/core --release --target wasm-gc
          cargo run --bin moon test --source-dir ~/.moon/lib/core --release --target js
          cargo run --bin moon test --source-dir ~/.moon/lib/core --release --target wasm
          cargo run --bin moon test --source-dir ~/.moon/lib/core --release --target native
          cargo run --bin moon test --source-dir ~/.moon/lib/core --doc
      - name: Test core (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --target wasm-gc
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --target js
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --target wasm
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --target native
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --release --target wasm-gc
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --release --target js
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --release --target wasm
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --release --target native
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --doc

      - name: Test core on llvm backend (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --target llvm
          cargo run --bin moon test --source-dir "$env:USERPROFILE\.moon\lib\core" --target llvm --release

      - name: Test core on llvm backend (Unix)
        if: ${{ (matrix.os != 'windows-latest') }}
        run: |
          cargo run --bin moon test --source-dir ~/.moon/lib/core --target llvm
          cargo run --bin moon test --source-dir ~/.moon/lib/core --target llvm --release
